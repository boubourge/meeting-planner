openapi: 3.0.4
info:
  title: Swagger Meeting Planner - OpenAPI 3.0
  description: Swagger du meeting planner
  contact:
    email: lucas.bourget@elephant-technologies.com
  version: 1.0.12
servers:
  - url: ...
tags:
  - name: planning
    description: Informations about the planning
  - name: reservation
    description: Access to the reservations
paths:
  /planning:
    get:
      tags:
        - planning
      summary: Informations about the planning.
      description: Get the planning
      operationId: getPlanning
      parameters:
        - name: timeSlot
          in: query
          description: Time slot for the response in days
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /planning/freeRooms:
    get:
      tags:
        - planning
      summary: Informations about the planning.
      description: Get the free rooms
      operationId: getFreeRooms
      parameters:
        - name: reunionDate
          in: query
          description: Date and hour of the reunion
          required: true
          schema:
            type: string
            format: date-time
        - name: reunionType
          in: query
          description: Type of the reunion
          required: true
          schema:
            $ref: '#/components/schemas/ReunionType'
        - name: participantNumber
          in: query
          description: Number of participants for the reunion
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reservation:
    get:
      tags:
        - reservation
      summary: Informations about the reservations.
      description: Check a rfeservation
      operationId: getReservation
      parameters:
        - name: reservationId
          in: query
          description: Id of the reservation
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          description: Unauthorized
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - reservation
      summary: Demand a new Reservation
      description: Add a new pet to the store.
      operationId: addReservation
      requestBody:
        description: Demand of a new reservation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - reservation
      summary: Demand a new Reservation
      description: Add a new pet to the store.
      operationId: putReservation
      requestBody:
        description: Demand of a new reservation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - reservation
      summary: Informations about the reservations.
      description: Check a rfeservation
      operationId: deleteReservation
      parameters:
        - name: reservationId
          in: query
          description: Id of the reservation
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          description: Unauthorized
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationNotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user:
    post:
      tags:
        - user
      summary: Create user.
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system.
      description: Log into the system.
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session.
      description: Log user out of the system.
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        date:
          type: string
          format: date
        room:
          type: string
        reunionType:
          type: string
          items:
            $ref: '#/components/schemas/ReunionType'
    Room:
      type: object
      properties:
        name:
          type: string
        capacity:
          type: integer
          format: int84
        material:
          type: array
          items:
            $ref: '#/components/schemas/Material'
    Material:
      type: string
      enum:
        - PIEUVRE
        - ECRAN
        - WEBCAM
        - TABLEAU
    ReunionType:
      type: string
      enum:
        - VC
        - SPEC
        - RS
        - RC
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
    ReservationNotFound:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
    Error:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
  requestBodies:
    Reservation:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reservation'